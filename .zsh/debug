#!/usr/bin/env zsh

# Based on a template by BASH3 Boilerplate v2.3.0
# http://bash3boilerplate.sh/#authors
#
# The MIT License (MIT)
# Copyright (c) 2013 Kevin van Zonneveld and contributors
#
# Rewritten for zsh by David Remy
# https://gitlab.com/dpremy
#
# Usage:
#  Turn on notice and higher logging (default)
#    LOG_LEVEL=5 ./script
#  Turn on all logging and turn colors off
#    LOG_LEVEL=7 NO_COLOR=true ./script


# Exit on error. Append "|| true" if you expect an error.
#set -o errexit
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace
# Turn on verbose zsh output, useful while debugging but commented out by default
#set -o verbose

# Define the environment variables (and their defaults) that this script depends on
LOG_LEVEL="${LOG_LEVEL-5}" # 7 = debug -> 0 = emergency
NO_COLOR="${NO_COLOR-}"    # true = disable color. otherwise autodetected

function __log () {
  local log_level="${1}"
  shift

  # shellcheck disable=SC2034
  local color_debug="\x1b[35m"
  # shellcheck disable=SC2034
  local color_info="\x1b[32m"
  # shellcheck disable=SC2034
  local color_notice="\x1b[34m"
  # shellcheck disable=SC2034
  local color_warning="\x1b[33m"
  # shellcheck disable=SC2034
  local color_error="\x1b[31m"
  # shellcheck disable=SC2034
  local color_critical="\x1b[1;31m"
  # shellcheck disable=SC2034
  local color_alert="\x1b[1;33;41m"
  # shellcheck disable=SC2034
  local color_emergency="\x1b[1;4;5;33;41m"

  local colorvar="color_${log_level}"

  #local color="${!colorvar:-${color_error}}"
  local color=$(eval echo \$${colorvar})
  local color_reset="\x1b[0m"

  if [[ "${NO_COLOR-}" = "true" ]] || { [[ "${TERM-}" != "xterm"* ]] && [[ "${TERM-}" != "screen"* ]] ;} || [[ ! -t 2 ]]; then
    if [[ "${NO_COLOR-}" != "false" ]]; then
      # Don't use colors on pipes or non-recognized terminals
      color=""; color_reset=""
    fi
  fi

  # all remaining arguments are to be printed
  local log_line=""

  while IFS=$'\n' read -r log_line; do
    echo -e "$(date -u +"%y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" "${log_level}")${color_reset} ${log_line}" 1>&2
  done <<< "${@-}"
}

function log_emergency () {                                __log emergency "${@}"; exit 1; }
function log_alert ()     { [[ "${LOG_LEVEL-0}" -ge 1 ]] && __log alert "${@}"; true; }
function log_critical ()  { [[ "${LOG_LEVEL-0}" -ge 2 ]] && __log critical "${@}"; true; }
function log_error ()     { [[ "${LOG_LEVEL-0}" -ge 3 ]] && __log error "${@}"; true; }
function log_warning ()   { [[ "${LOG_LEVEL-0}" -ge 4 ]] && __log warning "${@}"; true; }
function log_notice ()    { [[ "${LOG_LEVEL-0}" -ge 5 ]] && __log notice "${@}"; true; }
function log_info ()      { [[ "${LOG_LEVEL-0}" -ge 6 ]] && __log info "${@}"; true; }
function log_debug ()     { [[ "${LOG_LEVEL-0}" -ge 7 ]] && __log debug "${@}"; true; }



# All of these go to STDERR, so you can use STDOUT for piping machine readable information to other software
#log_debug "Info useful to developers for debugging the application, not useful during operations."
#log_info "Normal operational messages - may be harvested for reporting, measuring throughput, etc. - no action required."
#log_notice "Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required."
#log_warning "Warning messages, not an error, but indication that an error will occur if action is not taken, e.g. file system 85% full - each item must be resolved within a given time. This is a debug message"
#log_error "Non-urgent failures, these should be relayed to developers or admins; each item must be resolved within a given time."
#log_critical "Should be corrected immediately, but indicates failure in a primary system, an example is a loss of a backup ISP connection."
#log_alert "Should be corrected immediately, therefore notify staff who can fix the problem. An example would be the loss of a primary ISP connection."
#log_emergency "A \"panic\" condition usually affecting multiple apps/servers/sites. At this level it would usually notify all tech staff on call."

